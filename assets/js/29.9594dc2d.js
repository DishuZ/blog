(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{433:function(a,s,t){"use strict";t.r(s);var n=t(35),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",[t("tag",{attrs:{tags:a.$frontmatter.tags}})],1),a._v(" "),t("hr"),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("记录Java学习过程中的困惑之处 📖")])]),a._v(" "),t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),t("h2",{attrs:{id:"安装-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-java"}},[a._v("#")]),a._v(" 安装 Java")]),a._v(" "),t("h3",{attrs:{id:"_1-下载安装包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载安装包"}},[a._v("#")]),a._v(" 1）下载安装包")]),a._v(" "),t("p",[a._v("进入 ORACLE 官网："),t("a",{attrs:{href:"https://www.oracle.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.oracle.com/"),t("OutboundLink")],1),a._v(" ，点击顶部导航栏的 Products ，找到 Java （位于左下角），就到了 Java 介绍界面。\n接着右上角的 Download Java，选择合适的版本（企业开发一般用 JDK 8，学习可安装 JDK 17）下载即可。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java_pri_sky/202402282149708.png",alt:"图1.1 直达网址：https://www.oracle.com/java/technologies/downloads/#jdk17-windows"}})]),a._v(" "),t("p",[t("em",[a._v("本人安装的是 JDK 17 ，并且放在 java 文件夹下。")])]),a._v(" "),t("h3",{attrs:{id:"_2-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装"}},[a._v("#")]),a._v(" 2）安装")]),a._v(" "),t("p",[a._v("这一步按照指示操作即可，有一点需要注意，在选择安装路径的时候，"),t("strong",[a._v("路径必须不能是中文或者出现空格")]),a._v("，否则后续可能触发一系列莫名其妙的 bug。")]),a._v(" "),t("h3",{attrs:{id:"_3-验证是否安装成功"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-验证是否安装成功"}},[a._v("#")]),a._v(" 3）验证是否安装成功")]),a._v(" "),t("p",[a._v("打开终端/cmd，输入 java 和 javac 命令，若出现以下内容，便是安装成功。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java_pri_sky/202402282150297.png",alt:"图1.2 验证 java"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java_pri_sky/202402282150179.png",alt:"图1.3 验证 javac"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java_pri_sky/202402282150352.png",alt:"图1.4 查看安装的版本"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282151185.png",alt:"图1.5 查看 java 的来源：位于 java 下的 bin 目录"}})]),a._v(" "),t("h2",{attrs:{id:"前置知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[a._v("#")]),a._v(" 前置知识")]),a._v(" "),t("h3",{attrs:{id:"java-和-javac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-和-javac"}},[a._v("#")]),a._v(" java 和 javac")]),a._v(" "),t("p",[a._v("了解JDK中的 Java、Javac 的基本作用："),t("code",[a._v("**javac.exe**")]),t("strong",[a._v("是编译工具，")]),t("code",[a._v("**java.exe**")]),a._v("** 是执行工具**。")]),a._v(" "),t("p",[a._v("说明：将来我们写好的 Java 程序都是高级语言，计算机底层是硬件不能识别这些语言，必须先通过 Javac 编译工具进行翻译，然后再通过 Java 执行工具执行才可以驱动机器干活。")]),a._v(" "),t("h3",{attrs:{id:"java-程序开发三部曲"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-程序开发三部曲"}},[a._v("#")]),a._v(" java 程序开发三部曲")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282151695.png",alt:"图1.6 java 开发三部曲示意图"}})]),a._v(" "),t("p",[a._v("Notes：")]),a._v(" "),t("ul",[t("li",[a._v("建议代码文件名全英文，首字母大写，满足驼峰模式，源代码文件的后缀必须是 "),t("code",[a._v(".java")])]),a._v(" "),t("li",[a._v("文件名称必须与代码中的类名称一致，比如文件名为 "),t("code",[a._v("Hello.java")]),a._v("，那么文件里的类就必须是 "),t("code",[a._v("public class Hello { ... }")])]),a._v(" "),t("li",[a._v("编译："),t("code",[a._v("javac Hello.java")]),a._v("，执行："),t("code",[a._v("java Hello")]),a._v("。（特殊地，JDK 11 开始支持 "),t("code",[a._v("java")]),a._v(" 命令直接执行，如 "),t("code",[a._v("java Hello.java")]),a._v("）")]),a._v(" "),t("li",[a._v("BUG —— 创始人：格蕾丝.赫伯")])]),a._v(" "),t("h3",{attrs:{id:"jdk-组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-组成"}},[a._v("#")]),a._v(" JDK 组成")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282151599.png",alt:"图1.7 JDK 组成成分"}})]),a._v(" "),t("p",[a._v("图中，"),t("code",[a._v("javac")]),a._v(" 命令负责将程序员编写的 java 文件编译成字节码文件 "),t("code",[a._v(".class")]),a._v("，接着 JVM 负责运行 "),t("code",[a._v(".class")]),a._v("，而运行过程中用到了核心类库提供的便捷接口。")]),a._v(" "),t("p",[a._v("Java 程序的内存分配和回收都是由 JRE 在后台自动进行的，JRE 会负责回收那些不再使用的内容，这种机制被称为 "),t("strong",[a._v("垃圾回收（Garbage Collection, GC）")]),a._v("，垃圾回收是一种动态存储管理技术。")]),a._v(" "),t("h3",{attrs:{id:"环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[a._v("#")]),a._v(" 环境变量")]),a._v(" "),t("p",[a._v("Path 环境变量：用于记住程序路径，方便在 终端/cmd 的任意目录启动程序。")]),a._v(" "),t("p",[a._v("JAVA_HOME 环境变量：告诉操作系统JDK安装在了哪个位置（将来其他技术要通过这个环境变量找JDK）")]),a._v(" "),t("p",[t("em",[a._v("以前的老版本的JDK在安装的是没有自动配置Path环境变量的，此时必需要自己配置Path环境变量。")])]),a._v(" "),t("p",[t("em",[a._v("较新版本的JDK只是自动配置了Path，没有自动配置JAVA_HOME。")])]),a._v(" "),t("h2",{attrs:{id:"安装-java-集成开发环境-idea"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-java-集成开发环境-idea"}},[a._v("#")]),a._v(" 安装 Java 集成开发环境 — IDEA")]),a._v(" "),t("h3",{attrs:{id:"下载和安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载和安装"}},[a._v("#")]),a._v(" 下载和安装")]),a._v(" "),t("ol",[t("li",[a._v("IDE, Integrated Development Environment")])]),a._v(" "),t("p",[a._v("把代码编写，编译，执行等多种功能综合到一起的开发工具，可以进行代码智能提示，错误提醒，项目管理等等。常见的 Java  IDE 工具有：Eclipse、MyEclipse、"),t("strong",[a._v("IntelliJ IDEA")]),a._v("、Jbuilder、NetBeans等。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("下载 & 安装 IDEA")])]),a._v(" "),t("p",[a._v("下载链接："),t("a",{attrs:{href:"https://www.jetbrains.com/idea/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.jetbrains.com/idea/"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("安装方式：基本上是傻瓜式安装，建议修改安装路径（不要安装在有空格和中文的路径下）。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282151067.png",alt:"图1.8 IDEA 快捷键"}})]),a._v(" "),t("h3",{attrs:{id:"管理-java-程序的结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管理-java-程序的结构"}},[a._v("#")]),a._v(" 管理 Java 程序的结构")]),a._v(" "),t("p",[a._v("为了便于管理项目代码，将 Java 程序划分以下四类：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("project")]),a._v("    项目/工程")]),a._v(" "),t("li",[t("strong",[a._v("module")]),a._v("   模块")]),a._v(" "),t("li",[t("strong",[a._v("package")]),a._v("  包")]),a._v(" "),t("li",[t("strong",[a._v("class")]),a._v("        类")])]),a._v(" "),t("p",[a._v("示例：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282151122.png",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"java-各数据类型的存储原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-各数据类型的存储原理"}},[a._v("#")]),a._v(" Java 各数据类型的存储原理")]),a._v(" "),t("p",[a._v("程序都是在计算机中的内存中执行的，Java 编译后会生成 "),t("code",[a._v(".class")]),a._v("文件，然后把这个文件提取到正在运行的 JVM 中执行。")]),a._v(" "),t("p",[a._v("Java 内存分配：方法区 + 栈 + 堆")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282152858.png",alt:"图1.9 Java 内存的三个分区"}})]),a._v(" "),t("h3",{attrs:{id:"数组的存储和执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的存储和执行"}},[a._v("#")]),a._v(" 数组的存储和执行")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://raw.gitmirror.com/DishuZ/PicGo/main/java/202402282152179.png",alt:"图1.10 基本类型数据的值直接存储在栈内存；数组的元素值存储在堆内存连续的空间中，把该连续空间的首地址存储在栈内存中"}})]),a._v(" "),t("h1",{attrs:{id:"数据类型和运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型和运算符"}},[a._v("#")]),a._v(" 数据类型和运算符")]),a._v(" "),t("h2",{attrs:{id:"基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[a._v("#")]),a._v(" 基本数据类型")]),a._v(" "),t("p",[a._v("我们常把 Java 里的基本数据类型分为 4 类：1）整数类型；2）字符类型；3）浮点类型；4）布尔类型。")]),a._v(" "),t("p",[a._v("值得注意的是，字符串不是基本数据类型，字符串是一个类，是一个引用数据类型。")]),a._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[a._v("提问：为什么有栈内存和堆内存之分？")]),a._v(" "),t("p",[t("strong",[a._v("当一个方法执行时，每个方法都会建立自己的内存栈")]),a._v(" ，在这个方法内定义的变量将会逐个放入这块栈内存里， "),t("strong",[a._v("随着方法的执行结束，这个方法的内存栈也将自然销毁")]),a._v(" 。因此，所有在方法中定义的局部变量都是放在栈内存中的；")]),a._v(" "),t("p",[t("strong",[a._v("在程序中创建一个对象时，这个对象将被保存在运行的数据区中")]),a._v(" ，以便反复利用（因为对象的创建成本通常较大）， "),t("strong",[a._v("这个运行时数据区就是堆内存")]),a._v(" 。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（在方法的参数传递时很常见），则这个对象依然不会被销毁。只有当一个对象没有任何引用变量引用它时，系统的垃圾回收器才会在合适的时候回收它。")])]),a._v(" "),t("h1",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),t("p",[a._v("Java 是面向对象的程序设计语言，提供了定义类、成员变量、方法等最基本的功能。Java 拥有面向对象的三大特征：封装、继承和多态。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("封装")]),a._v(" — Java 提供了 "),t("code",[a._v("private")]),a._v("、"),t("code",[a._v("protected")]),a._v("、"),t("code",[a._v("public")]),a._v(" 三个访问控制修饰符来实现良好的封装")]),a._v(" "),t("li",[t("strong",[a._v("继承")]),a._v(" — Java 提供了 "),t("code",[a._v("extends")]),a._v(" 关键字来让子类继承父类，子类继承父类就可以继承到父类的的成员变量和方法，如果访问控制允许，子类实例可以直接调用父类里定义的方法。 "),t("strong",[a._v("继承是实现类复用的重要手段")]),a._v(" 。")]),a._v(" "),t("li",[t("strong",[a._v("多态")]),a._v(" — 使用继承关系来实现复用时，子类对象可以直接赋给父类变量，这个变量具有多态性，编程更加灵活。")])]),a._v(" "),t("h2",{attrs:{id:"类和对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[a._v("#")]),a._v(" 类和对象")]),a._v(" "),t("p",[a._v("类是面向对象的重要内容。在前面，我们已经知道类可以分为基本数据类型和引用类型，那么在这里，可以把类当成一种自定义的引用类型。因此可以使用类来定义变量（如 "),t("code",[a._v("User u = new User(...);")]),a._v("），这里的 "),t("code",[a._v("User")]),a._v(" 是自定义的类，变量 "),t("code",[a._v("u")]),a._v(" 就是引用类型。")]),a._v(" "),t("p",[a._v("定义类的简单语法如下：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("修饰符"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" 类名\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  构造器\n  成员变量\n  方法\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("修饰符可以是 "),t("code",[a._v("public")]),a._v("、"),t("code",[a._v("final")]),a._v("、"),t("code",[a._v("abstract")]),a._v("，或者完全省略这三个修饰符。需要指出的是，"),t("code",[a._v("static")]),a._v(" 修饰的成员不能访问没有 "),t("code",[a._v("static")]),a._v(" 修饰的成员。定义好类之后，在其他地方可以通过 "),t("code",[a._v("new")]),a._v(" 关键字来调用构造器，从而返回该类的实例。")]),a._v(" "),t("h1",{attrs:{id:"java-基础类库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-基础类库"}},[a._v("#")]),a._v(" Java 基础类库")]),a._v(" "),t("p",[a._v("Java 提供了 "),t("code",[a._v("String")]),a._v(" 、 "),t("code",[a._v("StringBuffer")]),a._v(" 和 "),t("code",[a._v("StringBuilder")]),a._v(" 来处理字符串，还提供了 "),t("code",[a._v("Date")]),a._v(" 和 "),t("code",[a._v("Calendar")]),a._v(" 来处理日期、时间，其中 "),t("code",[a._v("Date")]),a._v(" 是一个已经过时的 API ，通常推荐使用 "),t("code",[a._v("Calendar")]),a._v(" 来处理日期和时间。从 JDK 1.4 以后，Jave 也增加了对正则表达式的支持。")]),a._v(" "),t("h1",{attrs:{id:"java-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-集合"}},[a._v("#")]),a._v(" Java 集合")]),a._v(" "),t("h2",{attrs:{id:"java-集合概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-集合概述"}},[a._v("#")]),a._v(" Java 集合概述")]),a._v(" "),t("p",[a._v("为了保存数量不确定的数据，以及保存具有映射关系的数据（也被称为关联数组），Java 提供了 "),t("strong",[a._v("集合类")]),a._v(" 。集合类主要负责保存、盛装其他数据，因此集合类也称为 "),t("strong",[a._v("容器类")]),a._v(" 。所有的集合类都位于 "),t("code",[a._v("java.util")]),a._v(" 包下，后来为了处理多线程环境下的并发安全问题， Java 5 还在 "),t("code",[a._v("java.util.concurrent")]),a._v(" 包下提供了一些多线程支持的集合类。")]),a._v(" "),t("p",[a._v("Java 的集合类主要由两个接口派生而出： "),t("code",[a._v("Collection")]),a._v(" 和 "),t("code",[a._v("Map")]),a._v(" ，"),t("code",[a._v("Collection")]),a._v(" 和 "),t("code",[a._v("Map")]),a._v(" 是 Java 集合框架的根接口，这两个接口又包含了一些子接口和实现类。")]),a._v(" "),t("p",[a._v("对于 "),t("code",[a._v("Set")]),a._v(" 、 "),t("code",[a._v("List")]),a._v(" 、 "),t("code",[a._v("Queue")]),a._v(" 、 "),t("code",[a._v("Map")]),a._v(" 四种集合，最常用的实现类分别是 "),t("code",[a._v("HashSet")]),a._v(" 、 "),t("code",[a._v("TreeSet")]),a._v(" 、 "),t("code",[a._v("ArrayList")]),a._v(" 、 "),t("code",[a._v("ArrayDeque")]),a._v(" 、 "),t("code",[a._v("LinkedList")]),a._v(" 和 "),t("code",[a._v("HashMap")]),a._v(" 、 "),t("code",[a._v("TreeMap")]),a._v(" 等实现类。")]),a._v(" "),t("h2",{attrs:{id:"collection-和-iterator-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection-和-iterator-接口"}},[a._v("#")]),a._v(" Collection 和 Iterator 接口")]),a._v(" "),t("p",[t("code",[a._v("Collection")]),a._v(" 接口是 "),t("code",[a._v("List")]),a._v(" 、 "),t("code",[a._v("Set")]),a._v(" 和 "),t("code",[a._v("Queue")]),a._v(" 接口的父接口，该接口里定义的方法既可用于操作 "),t("code",[a._v("Set")]),a._v(" 集合，也可用于操作 "),t("code",[a._v("List")]),a._v(" 和 "),t("code",[a._v("Queue")]),a._v(" 集合。 "),t("code",[a._v("Collection")]),a._v(" 接口里定义了如下操作集合元素的方法：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("方法")]),a._v(" "),t("th",[a._v("解释")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[t("code",[a._v("boolean add(Object o)")])]),a._v(" "),t("td",[a._v("该方法把集合 "),t("code",[a._v("c")]),a._v(" 里的所有元素添加到指定集合里。如果集合对象被添加操作改变了，则返回 "),t("code",[a._v("true")])])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("boolean addAll(Collection c)")])]),a._v(" "),t("td",[a._v("该方法把集合 "),t("code",[a._v("c")]),a._v(" 里的所有元素添加到指定集合里。如果集合对象被添加操作改变了，则返回 "),t("code",[a._v("true")])])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("boolean contains(Object o)")])]),a._v(" "),t("td",[a._v("返回集合里是否包含指定元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("Iterator iterator()")])]),a._v(" "),t("td",[a._v("返回一个 "),t("code",[a._v("Iterator")]),a._v(" 对象，用于遍历集合里的元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("boolean remove(Object o)")])]),a._v(" "),t("td",[a._v("删除集合中的指定元素 "),t("code",[a._v("o")]),a._v(" ，当集合中包含了一个或多个元素 "),t("code",[a._v("o")]),a._v(" 时，该方法只删除第一个符合条件的元素，该方法将返回 "),t("code",[a._v("true")])])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("boolean retainAll(Collection c)")])]),a._v(" "),t("td",[a._v("从集合中删除集合 "),t("code",[a._v("c")]),a._v(" 里不包含的元素（当相遇把调用该方法的集合变成该集合和集合 "),t("code",[a._v("c")]),a._v(" 的交集），如果该操作改变了调用该方法的集合，则该方法返回 "),t("code",[a._v("true")])])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("Object[] toArray()")])]),a._v(" "),t("td",[a._v("把集合转换成一个数组，所有的集合元素变成对应的数据元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("int size()")])]),a._v(" "),t("td",[a._v("返回集合里元素的个数")])])])]),a._v(" "),t("h3",{attrs:{id:"使用-lambda-表达式遍历集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-lambda-表达式遍历集合"}},[a._v("#")]),a._v(" 使用 Lambda 表达式遍历集合")]),a._v(" "),t("p",[a._v("Java 8 为 Iterable 接口新增了一个 "),t("code",[a._v("forEach(Consumer action)")]),a._v(" 默认方法，该方法所需参数的类型是一个函数式接口，而 "),t("code",[a._v("Iterable")]),a._v(" 接口是 "),t("code",[a._v("Collection")]),a._v(" 接口的父接口，因此 "),t("code",[a._v("Collection")]),a._v(" 集合也可直接调用该方法。")]),a._v(" "),t("p",[a._v("当程序调用 "),t("code",[a._v("Iterable")]),a._v(" 的 "),t("code",[a._v("forEach")]),a._v(" 遍历集合元素时，程序会一次将集合元素传给 "),t("code",[a._v("Consumer")]),a._v(" 的 "),t("code",[a._v("accept(T t)")]),a._v(" 方法。正因为 "),t("code",[a._v("Consumer")]),a._v(" 是函数式接口，因此可以使用 Lambda 表达式来遍历集合元素。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CollectionEach")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 创建一个集合")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),a._v(" books "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 forEach() 方法遍历集合")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// forEach() 会自动将集合元素逐个传给 Lambda 表达式的形参 obj")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("h3",{attrs:{id:"使用-java-8-增强的-iterator-遍历集合元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-java-8-增强的-iterator-遍历集合元素"}},[a._v("#")]),a._v(" 使用 Java 8 增强的 Iterator 遍历集合元素")]),a._v(" "),t("p",[t("code",[a._v("Iterator")]),a._v(" 接口也是 Java 集合框架的成员，但它与 "),t("code",[a._v("Collection")]),a._v(" 系列、 "),t("code",[a._v("Map")]),a._v(" 系列的集合不一样： "),t("code",[a._v("Collection")]),a._v(" 和 "),t("code",[a._v("Map")]),a._v(" 系列主要用于盛装其他对象，而 "),t("code",[a._v("Iterator")]),a._v(" 则主要用于遍历（即迭代访问） "),t("code",[a._v("Collection")]),a._v(" 集合中的元素， "),t("code",[a._v("Iterator")]),a._v(" 对象也称为 "),t("strong",[a._v("迭代器")]),a._v(" 。")]),a._v(" "),t("p",[t("code",[a._v("Iterator")]),a._v(" 接口隐藏了各种 "),t("code",[a._v("Collection")]),a._v(" 实现类的底层细节，向应用程序提供了遍历 "),t("code",[a._v("Collection")]),a._v(" 集合元素的统一编程接口。 "),t("code",[a._v("Iterator")]),a._v(" 接口里定义了如下 4 个方法：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("方法")]),a._v(" "),t("th",[a._v("解释")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[t("code",[a._v("boolean hasNext()")])]),a._v(" "),t("td",[a._v("如果被迭代的集合元素还没被遍历完，则返回 "),t("code",[a._v("true")])])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("Object next()")])]),a._v(" "),t("td",[a._v("返回集合里的下一个元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("void remove()")])]),a._v(" "),t("td",[a._v("删除集合里上一次 "),t("code",[a._v("next")]),a._v(" 方法返回的元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("void forEachRemaining(Consumer action)")])]),a._v(" "),t("td",[a._v("Java 8 为 "),t("code",[a._v("Iterator")]),a._v(" 新增的默认方法，可使用 Lambda 表达式来遍历集合元素")])])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IteratorTest")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),a._v(" books "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取 books 集合对应的迭代器")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),a._v(" it "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 【1】")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// next 方法返回的数据类型是 Object 类型，因此需要强制类型转换")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" book "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("book"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("book"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 【2】 使用 Lambda 表达式遍历 Iterator")]),a._v("\n    it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEachRemaining")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 【3】 使用 foreach 循环遍历集合元素")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" books"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br")])]),t("h2",{attrs:{id:"set-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[a._v("#")]),a._v(" Set 集合")]),a._v(" "),t("p",[t("code",[a._v("Set")]),a._v(" 集合类似于一个罐子，程序把多个对象“丢进” "),t("code",[a._v("Set")]),a._v(" 集合，而 "),t("code",[a._v("Set")]),a._v(" 集合不会记住元素的添加顺序。实际上 "),t("code",[a._v("Set")]),a._v(" 就是 "),t("code",[a._v("Collection")]),a._v(" ，只是行为略有不同（ "),t("code",[a._v("Set")]),a._v(" 不允许包含重复元素）。基于 "),t("code",[a._v("Set")]),a._v(" 有三个实现类： "),t("code",[a._v("HashSet")]),a._v(" 、 "),t("code",[a._v("TreeSet")]),a._v(" 和 "),t("code",[a._v("EnumSet")]),a._v(" 。")]),a._v(" "),t("p",[t("code",[a._v("Set")]),a._v(" 既然称为集合，顾名思义， "),t("strong",[a._v("其不允许包含相同的元素")]),a._v(" 。")]),a._v(" "),t("h3",{attrs:{id:"hashset-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset-类"}},[a._v("#")]),a._v(" HashSet 类")]),a._v(" "),t("p",[t("code",[a._v("HashSet")]),a._v(" 是 "),t("code",[a._v("Set")]),a._v(" 接口的典型实现，大多数时候使用 "),t("code",[a._v("Set")]),a._v(" 时就是使用这个实现类。 "),t("code",[a._v("HashSet")]),a._v(" 按哈希算法来存储集合中的元素，因此具有很好的存取和查找性能。")]),a._v(" "),t("p",[a._v("当向 "),t("code",[a._v("HashSet")]),a._v(" 集合中存入一个元素时， "),t("code",[a._v("HashSet")]),a._v(" 会调用该对象的 "),t("code",[a._v("hashCode()")]),a._v(" 方法来得到该对象的 "),t("code",[a._v("hashCode")]),a._v(" 值，然后根据该 "),t("code",[a._v("hashCode")]),a._v(" 值决定该对象在 "),t("code",[a._v("HashSet")]),a._v(" 中的存储位置。如果有两个元素通过 "),t("code",[a._v("equals()")]),a._v(" 方法比较返回 "),t("code",[a._v("true")]),a._v(" ，但它们的 "),t("code",[a._v("hashCode()")]),a._v(" 方法返回值不相等， "),t("code",[a._v("HashSet")]),a._v(" 将会把它们存储在不同的位置，依然添加成功。也就是说，"),t("strong",[t("code",[a._v("HashSet")]),a._v(" 集合判断两个元素相等的标准是两个对象通过 "),t("code",[a._v("equals()")]),a._v(" 方法比较相等，并且两个对象的 "),t("code",[a._v("hashCode()")]),a._v(" 方法返回值也相等")]),a._v("。")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),t("p",[a._v("所以，这里有一个注意点 ：当把一个对象放入 "),t("code",[a._v("HashSet")]),a._v(" 中时，如果需要重写该对象对应类的 "),t("code",[a._v("equals()")]),a._v(" 方法，则也应该重写其 "),t("code",[a._v("hashCode()")]),a._v(" 方法。规则是：如果两个对象通过 "),t("code",[a._v("equals()")]),a._v(" 方法比较返回 "),t("code",[a._v("true")]),a._v(" ，这两个对象的 hashCode 值也应该相同。")]),a._v(" "),t("p",[a._v("如果两个对象通过 "),t("code",[a._v("equals()")]),a._v(" 返回 "),t("code",[a._v("true")]),a._v(" ，但这两个对象的 "),t("code",[a._v("hashCode()")]),a._v(" 返回不同的 hashCode 值时，这导致 "),t("code",[a._v("HashSet")]),a._v(" 把这两个对象保存在哈希表的不同位置，这与 "),t("code",[a._v("Set")]),a._v(" 集合的规则冲突了。")]),a._v(" "),t("p",[a._v("如果两个对象的 "),t("code",[a._v("hashCode()")]),a._v(" 返回的 hashCode 值相同，但通过 "),t("code",[a._v("equals()")]),a._v(" 返回 "),t("code",[a._v("false")]),a._v(" 时，则更麻烦。因为这两个对象的 hashCode 值相同， "),t("code",[a._v("HashSet")]),a._v(" 试图把它们保存在同一个位置，但又会造成冲突，所以会在这个位置用链式结构来保存多个对象，将会导致性能下降。")])]),a._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[a._v("提问：hashCode() 方法对于 HashSet 是不是十分重要？")]),a._v(" "),t("p",[t("strong",[a._v("哈希算法的功能是，它能保证快速查找被检索的对象")]),a._v(" ，哈希算法的价值在于速度。当需要查询集合中某个元素时，哈希算法可以直接根据该元素的 hashCode 值计算出该元素的存储位置，从而快速定位该元素。")]),a._v(" "),t("p",[a._v("当程序向 "),t("code",[a._v("HashSet")]),a._v(" 集合中添加元素时， "),t("code",[a._v("HashSet")]),a._v(" 会根据该元素的 hashCode 值来计算它的存储位置，这样也可快速定位该元素。")]),a._v(" "),t("p",[a._v("当从 "),t("code",[a._v("HashSet")]),a._v(" 中访问元素时， "),t("code",[a._v("HashSet")]),a._v(" 先计算该元素的 hashCode 值（也就是调用该对象的 "),t("code",[a._v("hashCode()")]),a._v(" 方法的返回值），然后直接到该 hashCode 值对应的位置去取出该元素——这就是 "),t("code",[a._v("HashSet")]),a._v(" 速度很快的原因。")])]),a._v(" "),t("h3",{attrs:{id:"treeset-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#treeset-类"}},[a._v("#")]),a._v(" TreeSet 类")]),a._v(" "),t("p",[t("code",[a._v("TreeSet")]),a._v(" 是 "),t("code",[a._v("SortedSet")]),a._v(" 接口的实现类，正如 "),t("code",[a._v("SortedSet")]),a._v(" 名字所暗示的， "),t("code",[a._v("TreeSet")]),a._v(" 可以确保集合元素处于排序状态。")]),a._v(" "),t("p",[t("code",[a._v("TreeSet")]),a._v(" 是根据元素实际值的大小来进行排序的。与 "),t("code",[a._v("HashSet")]),a._v(" 集合采用哈希算法来决定元素的存储位置不同， "),t("strong",[t("code",[a._v("TreeSet")]),a._v(" 采用红黑树的数据结构来存储集合元素")]),a._v(" 。 "),t("code",[a._v("TreeSet")]),a._v(" 支持两种排序方法：自然排序（默认）和定制排序。")]),a._v(" "),t("ol",[t("li",[a._v("自然排序")])]),a._v(" "),t("p",[t("code",[a._v("TreeSet")]),a._v(" 会调用集合元素的 "),t("code",[a._v("compareTo(Object obj)")]),a._v(" 方法来比较元素之间的大小关系，然后将集合元素按升序排列，这种方式就是自然排序。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("定制排序")])]),a._v(" "),t("p",[a._v("自然排序只能根据集合元素的大小将它们进行升序排序。如果需要降序或者按照自己的规则进行排序，则需要定制排序。")]),a._v(" "),t("p",[a._v("定制排序需要在创建 "),t("code",[a._v("TreeSet")]),a._v(" 集合对象时，提供一个 "),t("code",[a._v("Comparator")]),a._v(" 对象与该 "),t("code",[a._v("TreeSet")]),a._v(" 集合关联，由该 "),t("code",[a._v("Comparator")]),a._v(" 对象负责集合元素的排序逻辑。由于 "),t("code",[a._v("Comparator")]),a._v(" 是一个函数式接口，因此可使用 Lambda 表达式来代替 "),t("code",[a._v("Comparator")]),a._v(" 对象。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeSetTest")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 按照年龄降序排序")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 此处 Lambda 表达式的目标类型是 Comparator")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeSet")]),a._v(" ts "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TreeSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("o1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" o2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),a._v(" m1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("o1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),a._v(" m2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("o2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 根据 M 对象的 age 属性来决定大小， age 越大， M 对象反而越小")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" m1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" m2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("m1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" m2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("p",[t("code",[a._v("TreeSet")]),a._v(" 判断两个集合元素相等的标准是：通过 "),t("code",[a._v("Comparator")]),a._v(" 或 Lambda 表达式比较两个元素返回了 0 ，这样 "),t("code",[a._v("TreeSet")]),a._v(" 不会把第二个元素添加到集合中。")]),a._v(" "),t("h3",{attrs:{id:"各-set-实现类的性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各-set-实现类的性能分析"}},[a._v("#")]),a._v(" 各 Set 实现类的性能分析")]),a._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[a._v("DANGER")]),a._v(" "),t("p",[a._v("必须指出的是，"),t("code",[a._v("Set")]),a._v(" 的三个实现类都是线程不安全的。如果有多个线程同时访问一个 "),t("code",[a._v("Set")]),a._v(" 集合，并且有超过一个线程修改了该 "),t("code",[a._v("Set")]),a._v(" 集合，则必须手动保证该 "),t("code",[a._v("Set")]),a._v(" 集合的同步性。")]),a._v(" "),t("p",[a._v("通常可以通过 Collections 工具类的 "),t("code",[a._v("synchronizedSortedSet")]),a._v(" 方法来“包装”该 "),t("code",[a._v("Set")]),a._v(" 集合。此操作最好在创建时进行，以防止对 "),t("code",[a._v("Set")]),a._v(" 集合的意外非同步访问。")])]),a._v(" "),t("h1",{attrs:{id:"注解-annotation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解-annotation"}},[a._v("#")]),a._v(" 注解（Annotation）")]),a._v(" "),t("p",[a._v("从 JDK 5 开始，Java 增加了对元数据（MeteData）的支持，也就是 Annotation 。注解是代码里的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相应的处理。通过使用注解，开发人员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充的信息。")]),a._v(" "),t("h2",{attrs:{id:"基本注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本注解"}},[a._v("#")]),a._v(" 基本注解")]),a._v(" "),t("p",[a._v("Java 提供了 5 个基本注解的用法，使用注解时要在其前面增加 "),t("code",[a._v("@")]),a._v(" 符号，并把该注解当成一个修饰符使用，用于修饰它支持的程序元素。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("@Override")])]),a._v(" "),t("li",[t("code",[a._v("@Deprecated")])]),a._v(" "),t("li",[t("code",[a._v("@SuppressWarnings")])]),a._v(" "),t("li",[t("code",[a._v("@SafeVarags")]),a._v("           （Java 7 新增）")]),a._v(" "),t("li",[t("code",[a._v("@FunctionalInterface")]),a._v("  （Java 8 新增）")])]),a._v(" "),t("p",[a._v("这 5 个基本注解都定义在 "),t("code",[a._v("java.lang")]),a._v(" 包。")])])}),[],!1,null,null,null);s.default=e.exports}}]);